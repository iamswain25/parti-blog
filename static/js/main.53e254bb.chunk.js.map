{"version":3,"sources":["firebase.ts","components/loginUI.tsx","components/Header.tsx","components/UseSpinner.tsx","pages/BlogList.tsx","pages/BlogPost.tsx","components/Comments.tsx","pages/BlogView.tsx","pages/BlogEdit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","app","functions","storage","auth","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","React","isOpen","setIsOpen","user","setUser","disabled","setDisabled","modalCloseHandler","onAuthStateChanged","_user","console","log","to","onClick","name","size","src","photoURL","paddingLeft","displayName","signOut","onClose","label","value","onChange","event","currentTarget","currentUser","delete","catch","message","alert","a","updateProfile","then","firebaseAuth","$align","ALIGN","left","center","right","useSpinner","initialState","useState","spinner","position","backgroundColor","width","height","top","display","alignItems","justifyContent","spinnerState","setSpinner","cards","setCards","collection","orderBy","get","ref","docs","map","doc","_id","id","data","arr","finally","bind","c","key","title","commentCount","style","marginLeft","createdAt","toDate","toLocaleString","props","content","userId","userName","userPhotoURL","form","setForm","autoFocus","uid","Object","assign","Date","updatedAt","add","history","push","comments","Comment","Group","as","dividing","Avatar","Content","Author","Metadata","Text","Form","reply","TextArea","Button","labelPosition","icon","primary","docId","match","params","colR","d","setComment","comment","Comments","window","confirm","kind","KIND","secondary","update","engine","Styletron","App","padding","paddingTop","basename","process","theme","LightTheme","path","component","Header","exact","BlogList","BlogPost","BlogView","BlogEdit","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53e254bb.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/functions\";\nimport \"firebase/storage\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAiMC9K7NOKYY96rB8X0szmT9ukkVxsy2M\",\n  authDomain: \"parti-test1.firebaseapp.com\",\n  databaseURL: \"https://parti-test1.firebaseio.com\",\n  projectId: \"parti-test1\",\n  storageBucket: \"parti-test1.appspot.com\",\n  messagingSenderId: \"112588953542\",\n  appId: \"1:112588953542:web:3adeb7d6b9b7569a\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\nexport const firestore = firebase.firestore();\nexport const functions = firebase.app().functions(\"asia-northeast2\");\nif (process.env.NODE_ENV === \"development\") {\n  functions.useFunctionsEmulator(\"http://localhost:5000\");\n}\n// export const ui = new firebaseui.auth.AuthUI(firebase.auth());\nexport const storage = firebase.storage();\nexport const auth = firebase.auth();\nexport const uiConfig = {\n  // callbacks: {\n  //   signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n  //     // User successfully signed in.\n  //     // Return type determines whether we continue the redirect automatically\n  //     // or whether we leave that to developer to handle.\n  //     return true;\n  //   },\n  //   uiShown: function() {\n  //     // The widget is rendered.\n  //     // Hide the loader.\n  //     document.getElementById(\"loader\").style.display = \"none\";\n  //   }\n  // },\n  // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n  signInFlow: \"popup\",\n  // signInSuccessUrl: \"localhost\",\n  signInOptions: [\n    // Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\n    // firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    // firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    // firebase.auth.GithubAuthProvider.PROVIDER_ID,\n    // firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    // firebase.auth.PhoneAuthProvider.PROVIDER_ID\n  ]\n  // Terms of service url.\n  // tosUrl: \"<your-tos-url>\",\n  // Privacy policy url.\n  // privacyPolicyUrl: \"<your-privacy-policy-url>\"\n};\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Avatar } from \"baseui/avatar\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\nimport { StyledNavigationItem as NavigationItem } from \"baseui/header-navigation\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalButton\n} from \"baseui/modal\";\nimport { ButtonGroup } from \"baseui/button-group\";\nimport { Button } from \"baseui/button\";\nimport { Block } from \"baseui/block\";\nimport firebase, { auth, uiConfig } from \"../firebase\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nexport default () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [user, setUser] = React.useState<firebase.User | null>(null);\n  const [disabled, setDisabled] = React.useState(true);\n  React.useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(_user => {\n      if (_user) {\n        setUser(_user);\n        console.log(_user);\n      } else {\n        setUser(null);\n      }\n      setIsOpen(false);\n    });\n    return unsubscribe;\n  }, []);\n  function logout() {\n    auth.signOut();\n  }\n  function modalCloseHandler() {\n    setIsOpen(false);\n    setDisabled(true);\n  }\n  if (!user) {\n    return (\n      <NavigationItem>\n        <Button onClick={() => setIsOpen(true)}>로그인</Button>\n        <Modal onClose={() => setIsOpen(false)} isOpen={isOpen}>\n          <ModalHeader>로그인 방법</ModalHeader>\n          <ModalBody>\n            <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\n          </ModalBody>\n          {/* <ModalFooter>\n        <ModalButton onClick={props.close}>Cancel</ModalButton>\n      </ModalFooter> */}\n        </Modal>\n      </NavigationItem>\n    );\n  } else {\n    return (\n      <>\n        <NavigationItem>\n          <Link to=\"post\">\n            <Button>글 쓰기</Button>\n          </Link>\n        </NavigationItem>\n        <NavigationItem>\n          <ButtonGroup>\n            <Button onClick={() => setIsOpen(true)}>\n              <Avatar\n                name=\"user\"\n                size={\"scale1200\"}\n                src={user.photoURL || \"\"}\n              />\n              <Block paddingLeft={\"10px\"}>{user.displayName}</Block>\n            </Button>\n          </ButtonGroup>\n        </NavigationItem>\n        <NavigationItem>\n          <Button onClick={logout}>로그아웃</Button>\n        </NavigationItem>\n        <Modal onClose={modalCloseHandler} isOpen={isOpen}>\n          <ModalHeader>내 정보</ModalHeader>\n          <ModalBody>\n            <FormControl label=\"계정명\">\n              <Input\n                value={user.displayName || \"\"}\n                disabled={disabled}\n                onChange={event =>\n                  setUser({ ...user, displayName: event.currentTarget.value })\n                }\n              />\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <ModalButton\n              onClick={() =>\n                auth!\n                  .currentUser!.delete()\n                  .catch(({ message }) => alert(message))\n              }\n            >\n              계정삭제\n            </ModalButton>\n            <ModalButton onClick={modalCloseHandler}>취소</ModalButton>\n            {disabled ? (\n              <ModalButton onClick={() => setDisabled(false)}>수정</ModalButton>\n            ) : (\n              <ModalButton\n                onClick={async () =>\n                  auth!\n                    .currentUser!.updateProfile({\n                      displayName: user.displayName\n                    })\n                    .then(() => alert(\"변경되었습니다.\"))\n                    .then(() => setDisabled(true))\n                    .then(() => setIsOpen(false))\n                    .catch(alert)\n                }\n              >\n                변경\n              </ModalButton>\n            )}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  HeaderNavigation,\n  ALIGN,\n  StyledNavigationItem as NavigationItem,\n  StyledNavigationList as NavigationList\n} from \"baseui/header-navigation\";\n\nimport LoginUI from \"../components/loginUI\";\n\nexport default () => {\n  return (\n    <HeaderNavigation>\n      <NavigationList $align={ALIGN.left}>\n        <NavigationItem>\n          <Link to=\"/\">\n            <h1>Parti Blog</h1>\n          </Link>\n        </NavigationItem>\n      </NavigationList>\n      <NavigationList $align={ALIGN.center} />\n      {/* <NavigationList $align={ALIGN.right}>\n      <NavigationItem>\n        <Link href=\"#basic-link1\">Tab Link One</Link>\n      </NavigationItem>\n      <NavigationItem>\n        <Link href=\"#basic-link2\">Tab Link Two</Link>\n      </NavigationItem>\n    </NavigationList> */}\n      <NavigationList $align={ALIGN.right}>\n        <LoginUI />\n      </NavigationList>\n    </HeaderNavigation>\n  );\n};\n","import React, { Dispatch, SetStateAction, ReactElement } from \"react\";\nimport { Block } from \"baseui/block\";\nimport { Spinner } from \"baseui/spinner\";\nfunction useSpinner(\n  initialState: boolean = false\n): [boolean, Dispatch<SetStateAction<boolean>>, ReactElement | null] {\n  const [spinner, setSpinner] = React.useState(initialState);\n  let fullscreenSpinner = spinner ? (\n    <Block\n      position=\"fixed\"\n      backgroundColor=\"#FFF000AA\"\n      width=\"100%\"\n      height=\"100%\"\n      top=\"0\"\n      left=\"0\"\n      display={spinner ? \"flex\" : \"none\"}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Spinner size={96} />\n    </Block>\n  ) : null;\n  // React.useEffect(() => {\n  //   fullscreenSpinner = spinner ? (\n  //     <Block\n  //       position=\"fixed\"\n  //       backgroundColor=\"#FFF000AA\"\n  //       width=\"100%\"\n  //       height=\"100%\"\n  //       top=\"0\"\n  //       left=\"0\"\n  //       display={spinner ? \"flex\" : \"none\"}\n  //       alignItems=\"center\"\n  //       justifyContent=\"center\"\n  //     >\n  //       <Spinner size={96} />\n  //     </Block>\n  //   ) : null;\n  // }, [setSpinner]);\n  return [spinner, setSpinner, fullscreenSpinner];\n}\nexport default useSpinner;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useSpinner from \"../components/UseSpinner\";\nimport { firestore } from \"../firebase\";\nexport default () => {\n  const [spinnerState, setSpinner, spinner] = useSpinner(true);\n  const [cards, setCards] = React.useState<Array<any>>([]);\n  React.useEffect(() => {\n    firestore\n      .collection(\"posts\")\n      .orderBy(\"createdAt\")\n      .get()\n      .then(ref => ref.docs.map(doc => ({ _id: doc.id, ...doc.data() })))\n      .then(arr => setCards(arr))\n      .finally(setSpinner.bind(null, false));\n  }, [setSpinner]);\n  if (spinnerState) {\n    return spinner;\n  }\n  return (\n    <>\n      {cards.map(c => (\n        <ul key={c._id}>\n          <li>\n            <Link to={`post/${c._id}`}>{c.title}</Link>\n            {c.commentCount ? `(c.commentCount)` : \"\"}\n            <i style={{ marginLeft: 10 }}>\n              -{c.createdAt.toDate().toLocaleString(\"ko\")}\n            </i>\n          </li>\n        </ul>\n      ))}\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { FormControl } from \"baseui/form-control\";\nimport { RouteComponentProps, Redirect } from \"react-router-dom\";\nimport { Button } from \"baseui/button\";\nimport { Input } from \"baseui/input\";\nimport useSpinner from \"../components/UseSpinner\";\nimport { Textarea } from \"baseui/textarea\";\nimport { auth, firestore } from \"../firebase\";\n\nexport default (props: RouteComponentProps) => {\n  const [spinnerState, setSpinner, spinner] = useSpinner(false);\n  const [form, setForm] = React.useState({\n    title: \"\",\n    content: \"\",\n    userId: \"\",\n    userName: \"\",\n    userPhotoURL: \"\"\n  });\n  function save() {\n    setSpinner(true);\n    const { uid, photoURL, displayName } = auth!.currentUser!;\n    Object.assign(form, {\n      userId: uid,\n      userPhotoURL: photoURL,\n      userName: displayName,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    firestore\n      .collection(\"posts\")\n      .add(form)\n      .then(() => props.history.push(\"/\"));\n  }\n  if (!auth.currentUser) {\n    return <Redirect to=\"/\" />;\n  }\n  if (spinnerState) {\n    return spinner;\n  }\n  return (\n    <>\n      <FormControl label=\"제목\">\n        <Input\n          autoFocus\n          value={form.title}\n          onChange={event =>\n            setForm({ ...form, title: event.currentTarget.value })\n          }\n        />\n      </FormControl>\n      <FormControl label=\"내용\">\n        <Textarea\n          value={form.content}\n          onChange={event =>\n            setForm({ ...form, content: event.currentTarget.value })\n          }\n        />\n      </FormControl>\n      <Button onClick={save}>저장</Button>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Button, Comment, Form, Header } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport default (props: { comments: any[] }) => {\n  console.log(props.comments);\n  return (\n    <Comment.Group>\n      <Header as=\"h3\" dividing>\n        댓글\n      </Header>\n\n      <Comment>\n        <Comment.Avatar src=\"https://react.semantic-ui.com/images/avatar/small/matt.jpg\" />\n        <Comment.Content>\n          <Comment.Author as=\"a\">Matt</Comment.Author>\n          <Comment.Metadata>Today at 5:42PM</Comment.Metadata>\n          <Comment.Text>How artistic!</Comment.Text>\n        </Comment.Content>\n      </Comment>\n\n      <Form reply>\n        <Form.TextArea />\n        <Button content=\"댓글 달기\" labelPosition=\"right\" icon=\"edit\" primary />\n      </Form>\n    </Comment.Group>\n  );\n};\n","import * as React from \"react\";\nimport { Avatar } from \"baseui/avatar\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport { Button } from \"baseui/button\";\nimport { Block } from \"baseui/block\";\nimport firebase, { auth, firestore } from \"../firebase\";\nimport Comments from \"../components/Comments\";\nimport { Heading, HeadingLevel } from \"baseui/heading\";\nimport { Paragraph1 } from \"baseui/typography\";\nimport useSpinner from \"../components/UseSpinner\";\n\nexport default (props: RouteComponentProps<{ id: string }>) => {\n  const docId = props.match.params.id;\n  const [spinnerState, setSpinner, spinner] = useSpinner(true);\n  React.useEffect(() => {\n    firestore\n      .collection(\"posts\")\n      .doc(docId)\n      .get()\n      .then(doc => doc.data() || {})\n      .then(setForm)\n      .finally(setSpinner.bind(null, false));\n    firestore\n      .collection(\"posts\")\n      .doc(docId)\n      .collection(\"comments\")\n      .get()\n      .then(colR =>\n        colR.docs.map(d => ({\n          _id: d.id,\n          ...d.data()\n        }))\n      )\n      .then(setComment);\n  }, [docId, setSpinner]);\n  const [form, setForm] = React.useState<firebase.firestore.DocumentData>({});\n  const [comment, setComment] = React.useState<\n    Array<firebase.firestore.DocumentData>\n  >([]);\n  if (spinnerState) {\n    return spinner;\n  }\n  return (\n    <>\n      <HeadingLevel>\n        <Block alignItems=\"center\" display=\"flex\">\n          <Avatar\n            name={form.userName}\n            size={\"scale1000\"}\n            src={form.userPhotoURL}\n          />\n          <span style={{ marginLeft: 10 }}>{form.userName}</span>\n        </Block>\n        {form.createdAt.toDate().toLocaleString(\"ko\")}\n        <Heading>{form.title}</Heading>\n        <Paragraph1>{form.content}</Paragraph1>\n      </HeadingLevel>\n      {auth!.currentUser && auth!.currentUser!.uid === form.userId && (\n        <Link to={`/edit/${docId}`}>\n          <Button>수정</Button>\n        </Link>\n      )}\n      <Comments comments={comment} />\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { FormControl } from \"baseui/form-control\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Button, KIND } from \"baseui/button\";\nimport { Block } from \"baseui/block\";\nimport { Input } from \"baseui/input\";\nimport { Spinner } from \"baseui/spinner\";\nimport { Textarea } from \"baseui/textarea\";\nimport { auth, firestore } from \"../firebase\";\n\nexport default (props: RouteComponentProps<{ id: string }>) => {\n  const docId = props.match.params.id;\n  const [form, setForm] = React.useState<firebase.firestore.DocumentData>({});\n  const [spinner, setSpinner] = React.useState(true);\n  React.useEffect(() => {\n    firestore\n      .collection(\"posts\")\n      .doc(docId)\n      .get()\n      .then(doc => doc.data() || {})\n      .then(setForm)\n      .finally(setSpinner.bind(null, false));\n  }, [docId]);\n  function save() {\n    setSpinner(true);\n    const { uid, photoURL, displayName } = auth!.currentUser!;\n    Object.assign(form, {\n      userId: uid,\n      userPhotoURL: photoURL,\n      userName: displayName,\n      updatedAt: new Date()\n    });\n    firestore\n      .collection(\"posts\")\n      .doc(docId)\n      .update(form)\n      .then(() => props.history.push(\"/\"));\n  }\n  function remove() {\n    if (window.confirm(\"댓글과 함께 모두 삭제됩니다. 삭제하시겠습니까?\")) {\n      setSpinner(true);\n      firestore\n        .collection(\"posts\")\n        .doc(docId)\n        .delete()\n        .then(() => props.history.push(\"/\"));\n    }\n  }\n  // if (!auth.currentUser) {\n  //   return <Redirect to=\"/\" />;\n  // }\n  if (spinner) {\n    return (\n      <Block\n        position=\"fixed\"\n        backgroundColor=\"#FFF000AA\"\n        width=\"100%\"\n        height=\"100%\"\n        top=\"0\"\n        left=\"0\"\n        display={spinner ? \"flex\" : \"none\"}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Spinner size={96} />\n      </Block>\n    );\n  }\n  return (\n    <>\n      <FormControl label=\"제목\">\n        <Input\n          autoFocus\n          value={form.title}\n          onChange={event =>\n            setForm({ ...form, title: event.currentTarget.value })\n          }\n        />\n      </FormControl>\n      <FormControl label=\"내용\">\n        <Textarea\n          value={form.content}\n          onChange={event =>\n            setForm({ ...form, content: event.currentTarget.value })\n          }\n        />\n      </FormControl>\n      <Button onClick={remove} kind={KIND.secondary}>\n        삭제\n      </Button>\n      <Button onClick={save} kind={KIND.primary}>\n        저장\n      </Button>\n    </>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider } from \"baseui\";\nimport Header from \"./components/Header\";\nimport BlogList from \"./pages/BlogList\";\nimport BlogPost from \"./pages/BlogPost\";\nimport BlogView from \"./pages/BlogView\";\nimport BlogEdit from \"./pages/BlogEdit\";\nconst engine = new Styletron();\n\nconst App: React.FC = () => {\n  return (\n    <div\n      style={{\n        padding: \"0px 1.0875rem 1.45rem\",\n        paddingTop: 0\n      }}\n    >\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <StyletronProvider value={engine}>\n          <BaseProvider theme={LightTheme}>\n            <Route path=\"/\" component={Header} />\n            <Switch>\n              <Route path=\"/\" exact component={BlogList} />\n              <Route path=\"/post\" exact component={BlogPost} />\n              <Route path=\"/post/:id\" exact component={BlogView} />\n              <Route path=\"/edit/:id\" exact component={BlogEdit} />\n            </Switch>\n          </BaseProvider>\n        </StyletronProvider>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}